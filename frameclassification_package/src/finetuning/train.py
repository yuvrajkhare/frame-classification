# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SRaS0u-ddU9ULvV96WZSop4zXNmk0_YL
"""

import torch
import torch.optim as optim
from torch.cuda.amp import autocast, GradScaler
from torch.utils.data import DataLoader, ConcatDataset, Subset
from sklearn.metrics import precision_recall_fscore_support, accuracy_score, confusion_matrix
from sklearn.model_selection import StratifiedKFold
from tqdm import tqdm
import pickle
import os
from finetuning.dataset import SurgicalImagesDataset, TransformSubset
from finetuning.model import create_classifier
from utils.losses import FocalLoss
from finetuning.augmentations import get_finetune_transforms
from utils.visualization import plot_results, plot_confusion_matrix

def train_finetuning_model(annotations_files, image_dirs, augmented_images_dir, results_path, checkpoint_dir, pretrained_weights_path=None, num_epochs=30, patience=3):
    print("Initializing training...", flush=True)

    # Ensure the checkpoint directory exists
    if not os.path.exists(checkpoint_dir):
        os.makedirs(checkpoint_dir)
        print(f"Created checkpoint directory: {checkpoint_dir}", flush=True)

    # Load datasets and apply transformations
    datasets = [SurgicalImagesDataset(ann_file, image_dir, augmented_image_dir=augmented_images_dir)
                for ann_file, image_dir in zip(annotations_files, image_dirs)]
    combined_dataset = ConcatDataset(datasets)
    train_transforms, val_transforms = get_finetune_transforms()

    def extract_targets_from_concat_dataset(concat_dataset):
        all_targets = []
        for dataset in concat_dataset.datasets:
            all_targets.extend([annotation['label'] for annotation in dataset.annotations])
        return torch.tensor(all_targets)

    all_targets = extract_targets_from_concat_dataset(combined_dataset)

    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"Using device: {device}", flush=True)
    
    kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

    scaler = GradScaler()
    criterion = FocalLoss(alpha=1, gamma=2)

    fold_results = []
    all_fold_predictions = []
    all_fold_true_labels = []
    all_fold_probs = []
    fold_accuracies = []
    confusion_matrices = []

    for fold, (train_val_idx, _) in enumerate(kf.split(torch.zeros(len(all_targets)), all_targets)):
        print(f"Starting fold {fold+1}/{kf.get_n_splits()}...", flush=True)
        
        train_val_subset = Subset(combined_dataset, train_val_idx)
        train_size = int(0.8 * len(train_val_subset))
        val_size = len(train_val_subset) - train_size

        train_indices, val_indices = torch.utils.data.random_split(list(range(len(train_val_subset))), [train_size, val_size])
        train_subset = Subset(train_val_subset, train_indices)
        val_subset = Subset(train_val_subset, val_indices)

        train_dataloader = DataLoader(TransformSubset(train_subset, transform=train_transforms), batch_size=128, shuffle=True, num_workers=2)
        val_dataloader = DataLoader(TransformSubset(val_subset, transform=val_transforms), batch_size=128, shuffle=False, num_workers=2)

        # Create the classifier with the option to load pretrained contrastive weights
        classifier = create_classifier(pretrained_weights_path=pretrained_weights_path).to(device)
        print(f"Classifier model created and moved to {device}.", flush=True)

        optimizer = optim.Adam(classifier.parameters(), lr=0.0001, weight_decay=1e-4)
        scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=3)

        best_loss = float('inf')
        best_val_acc = 0.0
        epochs_no_improve = 0

        print("Starting training loop...", flush=True)
        for epoch in range(num_epochs):
            print(f"Epoch {epoch+1}/{num_epochs}", flush=True)

            if epochs_no_improve >= patience:
                print(f"Early stopping at epoch {epoch+1} due to no improvement.", flush=True)
                break

            classifier.train()
            running_loss = 0.0
            correct = 0
            total = 0

            progress_bar = tqdm(enumerate(train_dataloader), total=len(train_dataloader), desc=f"Epoch [{epoch+1}/{num_epochs}]")
            for batch_idx, (images, labels) in progress_bar:
                images, labels = images.to(device), labels.to(device)

                optimizer.zero_grad()
                with autocast():
                    outputs = classifier(images)
                    loss = criterion(outputs, labels)
                scaler.scale(loss).backward()
                scaler.step(optimizer)
                scaler.update()

                running_loss += loss.item()
                _, predicted = torch.max(outputs.data, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

                progress_bar.set_postfix(loss=loss.item(), accuracy=100 * correct / total)

            epoch_loss = running_loss / len(train_dataloader)
            epoch_acc = 100 * correct / total
            print(f"Epoch [{epoch+1}/{num_epochs}] finished with Loss: {epoch_loss:.4f}, Accuracy: {epoch_acc:.2f}%", flush=True)

            classifier.eval()
            val_loss = 0.0
            val_correct = 0
            val_total = 0
            all_preds = []
            all_labels = []

            with torch.no_grad():
                for images, labels in val_dataloader:
                    images, labels = images.to(device), labels.to(device)
                    outputs = classifier(images)
                    loss = criterion(outputs, labels)
                    val_loss += loss.item()
                    _, predicted = torch.max(outputs.data, 1)
                    val_total += labels.size(0)
                    val_correct += (predicted == labels).sum().item()
                    all_preds.extend(predicted.cpu().numpy())
                    all_labels.extend(labels.cpu().numpy())

            val_loss /= len(val_dataloader)
            val_acc = 100 * val_correct / val_total
            print(f"Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_acc:.2f}%", flush=True)

            if val_loss < best_loss:
                best_loss = val_loss
                torch.save(classifier.state_dict(), os.path.join(checkpoint_dir, f'best_model_fold{fold+1}_val_loss.pth'))
                print(f"New best model saved for fold {fold+1} with validation loss {val_loss:.4f}.", flush=True)
                epochs_no_improve = 0
            else:
                epochs_no_improve += 1

            if val_acc > best_val_acc:
                best_val_acc = val_acc
                torch.save(classifier.state_dict(), os.path.join(checkpoint_dir, f'best_model_fold{fold+1}_val_acc.pth'))
                print(f"New best accuracy model saved for fold {fold+1} with validation accuracy {val_acc:.2f}%.", flush=True)

            scheduler.step(val_loss)

            if (epoch + 1) % 2 == 0:
                torch.save({
                    'epoch': epoch,
                    'model_state_dict': classifier.state_dict(),
                    'optimizer_state_dict': optimizer.state_dict(),
                    'best_loss': best_loss,
                    'best_val_acc': best_val_acc,
                }, os.path.join(checkpoint_dir, f'checkpoint_fold{fold+1}_epoch{epoch+1}.pth'))
                print(f"Checkpoint saved for fold {fold+1}, epoch {epoch+1}.", flush=True)

        all_fold_predictions.append(all_preds)
        all_fold_true_labels.append(all_labels)

        cm = confusion_matrix(all_labels, all_preds)
        confusion_matrices.append(cm)

    with open(results_path, 'wb') as f:
        pickle.dump({
            'fold_results': fold_results,
            'all_fold_predictions': all_fold_predictions,
            'all_fold_true_labels': all_fold_true_labels,
            'confusion_matrices': confusion_matrices,
        }, f)
    print(f"Results saved to {results_path}.", flush=True)

    plot_results(fold_results, checkpoint_dir)
    for i, cm in enumerate(confusion_matrices):
        plot_confusion_matrix(cm, fold=i+1, checkpoint_dir=checkpoint_dir)

    print("Training completed.", flush=True)
    return classifier
