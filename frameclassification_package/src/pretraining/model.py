# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SRaS0u-ddU9ULvV96WZSop4zXNmk0_YL
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import timm  # Import timm for model loading

class ProjectionHead(nn.Module):
    def __init__(self, in_dim, out_dim, hidden_dim=2048):
        super(ProjectionHead, self).__init__()
        self.mlp = nn.Sequential(
            nn.Linear(in_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, out_dim),
        )

    def forward(self, x):
        x = self.mlp(x)
        return F.normalize(x, dim=-1)

def create_pretraining_model():
    # Load a base model with pretrained ImageNet weights
    base_model = timm.create_model('tf_efficientnetv2_s', pretrained=True)
    
    # Get the number of features for the classifier layer
    num_ftrs = base_model.classifier.in_features
    
    # Replace the classifier with an identity layer to remove it
    base_model.classifier = nn.Identity()

    # Combine the base model with the projection head
    model = nn.Sequential(
        base_model,
        ProjectionHead(num_ftrs, 128)  # The output of ProjectionHead is normalized to 128 dimensions
    )

    return model
