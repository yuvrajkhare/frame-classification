# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SRaS0u-ddU9ULvV96WZSop4zXNmk0_YL
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA
import umap

def visualize_embeddings(model, dataloader, epoch, device):
    model.eval()
    embeddings = []
    labels = []

    with torch.no_grad():
        for (blur_images, sharp_images, non_surgical_images) in dataloader:
            blur_images = blur_images.to(device)
            sharp_images = sharp_images.to(device)
            non_surgical_images = non_surgical_images.to(device)

            blur_out = model(blur_images).cpu().numpy()
            sharp_out = model(sharp_images).cpu().numpy()
            non_surgical_out = model(non_surgical_images).cpu().numpy()

            embeddings.append(blur_out)
            embeddings.append(sharp_out)
            embeddings.append(non_surgical_out)

            labels.extend([0] * blur_out.shape[0])
            labels.extend([1] * sharp_out.shape[0])
            labels.extend([2] * non_surgical_out.shape[0])

    embeddings = np.concatenate(embeddings, axis=0)
    labels = np.array(labels)

    palette = sns.color_palette("Set2", 3)

    tsne = TSNE(n_components=2, perplexity=30, n_iter=300)
    embeddings_tsne = tsne.fit_transform(embeddings)

    pca = PCA(n_components=2)
    embeddings_pca = pca.fit_transform(embeddings)

    reducer = umap.UMAP()
    embeddings_umap = reducer.fit_transform(embeddings)

    plt.figure(figsize=(20, 6))

    plt.subplot(1, 3, 1)
    plt.scatter(embeddings_tsne[labels == 0, 0], embeddings_tsne[labels == 0, 1], color=palette[0], label='Blurred', alpha=0.7, edgecolor='k')
    plt.scatter(embeddings_tsne[labels == 1, 0], embeddings_tsne[labels == 1, 1], color=palette[1], label='Sharp', alpha=0.7, edgecolor='k')
    plt.scatter(embeddings_tsne[labels == 2, 0], embeddings_tsne[labels == 2, 1], color=palette[2], label='Non-Surgical', alpha=0.7, edgecolor='k')
    plt.legend()
    plt.title(f't-SNE (Epoch {epoch})')
    plt.grid(True)

    plt.subplot(1, 3, 2)
    plt.scatter(embeddings_pca[labels == 0, 0], embeddings_pca[labels == 0, 1], color=palette[0], label='Blurred', alpha=0.7, edgecolor='k')
    plt.scatter(embeddings_pca[labels == 1, 0], embeddings_pca[labels == 1, 1], color=palette[1], label='Sharp', alpha=0.7, edgecolor='k')
    plt.scatter(embeddings_pca[labels == 2, 0], embeddings_pca[labels == 2, 1], color=palette[2], label='Non-Surgical', alpha=0.7, edgecolor='k')
    plt.legend()
    plt.title(f'PCA (Epoch {epoch})')
    plt.grid(True)

    plt.subplot(1, 3, 3)
    plt.scatter(embeddings_umap[labels == 0, 0], embeddings_umap[labels == 0, 1], color=palette[0], label='Blurred', alpha=0.7, edgecolor='k')
    plt.scatter(embeddings_umap[labels == 1, 0], embeddings_umap[labels == 1, 1], color=palette[1], label='Sharp', alpha=0.7, edgecolor='k')
    plt.scatter(embeddings_umap[labels == 2, 0], embeddings_umap[labels == 2, 1], color=palette[2], label='Non-Surgical', alpha=0.7, edgecolor='k')
    plt.legend()
    plt.title(f'UMAP (Epoch {epoch})')
    plt.grid(True)

    plt.show()

def plot_results(fold_results, checkpoint_dir):
    plt.figure(figsize=(20, 10))

    plt.subplot(2, 1, 1)
    for i, result in enumerate(fold_results):
        plt.plot(result['train_accuracies'], label=f'Train Accuracy Fold {i+1}')
        plt.plot(result['val_accuracies'], label=f'Val Accuracy Fold {i+1}')
    plt.title('Ac uracy Curves')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy (%)')
    plt.legend()

    plt.subplot(2, 1, 2)
    for i, result in enumerate(fold_results):
        plt.plot(result['train_losses'], label=f'Train Loss Fold {i+1}')
        plt.plot(result['val_losses'], label=f'Val Loss Fold {i+1}')
    plt.title('Loss Curves')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

    plt.tight_layout()
    plt.savefig(f"{checkpoint_dir}/training_results.png")
    plt.show()

def plot_confusion_matrix(cm, fold, checkpoint_dir):
    plt.figure(figsize=(10, 7))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix for Fold {fold}')
    plt.xlabel('Predicted')
    plt.ylabel('True')
    plt.savefig(f"{checkpoint_dir}/confusion_matrix_fold{fold}.png")
    plt.show()