# -*- coding: utf-8 -*-
"""dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SRaS0u-ddU9ULvV96WZSop4zXNmk0_YL
"""

import os
import xml.etree.ElementTree as ET
from PIL import Image
from torch.utils.data import Dataset

class SurgicalImagesDataset(Dataset):
    def __init__(self, annotations_file, image_dir, augmented_image_dir=None, transform=None):
        self.annotations = self.parse_annotations(annotations_file)
        self.image_dir = image_dir
        self.augmented_image_dir = augmented_image_dir or "augmented_images"
        self.transform = transform

        self.augmented_images = []
        if augmented_image_dir:
            for fname in os.listdir(augmented_image_dir):
                if fname.endswith(('.jpg', '.png', '.jpeg')):
                    self.augmented_images.append({'name': fname, 'label': 2})

    def parse_annotations(self, xml_file):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        images = []
        labels = {}

        for label_elem in root.findall('.//label'):
            label_name = label_elem.find('name').text
            labels[label_name] = len(labels)

        for image_elem in root.findall('.//image'):
            tag_elem = image_elem.find('tag')
            if tag_elem is None:
                continue

            label_name = tag_elem.get('label')
            if label_name not in labels:
                continue

            image_data = {
                'name': image_elem.get('name'),
                'label': labels[label_name]
            }
            images.append(image_data)
        return images

    def __len__(self):
        return len(self.annotations) + len(self.augmented_images)

    def __getitem__(self, idx):
        if idx < len(self.annotations):
            image_data = self.annotations[idx]
            image_name = image_data['name']
            label = image_data['label']
            image_path = os.path.join(self.image_dir, image_name)
        else:
            image_data = self.augmented_images[idx - len(self.annotations)]
            image_name = image_data['name']
            label = image_data['label']
            image_path = os.path.join(self.augmented_image_dir, image_name)

        image = Image.open(image_path).convert('RGB')

        if self.transform:
            image = self.transform(image)

        return image, label

class TransformSubset(Dataset):
    def __init__(self, subset, transform=None):
        self.subset = subset
        self.transform = transform

    def __len__(self):
        return len(self.subset)

    def __getitem__(self, idx):
        image, label = self.subset[idx]
        if self.transform:
            image = self.transform(image)
        return image, label