# -*- coding: utf-8 -*-
"""augmentations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SRaS0u-ddU9ULvV96WZSop4zXNmk0_YL
"""

import os
import requests
from PIL import ImageFont, ImageDraw, Image
import random
import string

class TaskSpecificAugmentations:
    def __init__(self, watermark_text=None, watermark_size_range=(100, 100), random_text_length=8, font_path=None):
        self.watermark_text = watermark_text
        self.watermark_size_range = watermark_size_range
        self.random_text_length = random_text_length
        # Download font to a more accessible path (e.g., current directory)
        self.font_path = font_path or "./Roboto-Regular.ttf"
        self.download_font_if_not_exists()

    def download_font_if_not_exists(self):
        if not os.path.exists(self.font_path):
            print(f"Font not found at {self.font_path}. Downloading font...")
            url = "https://github.com/google/fonts/raw/main/apache/roboto/static/Roboto-Regular.ttf"
            response = requests.get(url)
            with open(self.font_path, 'wb') as f:
                f.write(response.content)
            print(f"Font downloaded and saved to {self.font_path}.")

    def generate_random_text(self):
        return ''.join(random.choices(string.ascii_uppercase + string.digits, k=self.random_text_length))

    def add_watermark(self, image):
        draw = ImageDraw.Draw(image)
        width, height = image.size
        text = self.watermark_text if self.watermark_text else self.generate_random_text()

        font_size = random.randint(*self.watermark_size_range)

        try:
            font = ImageFont.truetype(self.font_path, font_size)
        except OSError:
            print(f"Warning: Could not load font at {self.font_path}. Using default font.")
            font = ImageFont.load_default()

        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        position = ((width - text_width) // 2, (height - text_height) // 2)

        draw.text(position, text, fill=(255, 255, 255), font=font)
        return image

    def make_non_surgical(self, image):
        return image.convert("L").convert("RGB")

def random_non_surgical_augmentation(img):
    task_specific_augmentations = TaskSpecificAugmentations()
    if random.random() > 0.5:
        return task_specific_augmentations.make_non_surgical(img)
    else:
        return task_specific_augmentations.add_watermark(img)
